# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy container app to Azure Web App - tradgardsgolf-api

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install and Start Azure Cosmos DB Emulator
        shell: pwsh
        run: |
          Write-Host "Downloading and installing Cosmos DB Emulator"
          Invoke-WebRequest -Uri https://aka.ms/cosmosdb-emulator -OutFile cosmos-emulator.msi
          Start-Process msiexec -ArgumentList "/i cosmos-emulator.msi /quiet /qn" -Wait
          
          Write-Host "Starting Cosmos DB Emulator"
          Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
          Start-CosmosDbEmulator -NoUI -NoFirewall
          
          Write-Host "Waiting for Cosmos DB Emulator to be ready..."
          $attempts = 0
          do {
              try {
                  $response = Invoke-WebRequest -Uri https://localhost:8081/_explorer/index.html -UseBasicParsing
                  if ($response.StatusCode -eq 200) { 
                      Write-Host "Cosmos DB Emulator is ready!"
                      break 
                  }
              } catch {
                  if ($attempts -gt 10) {
                      Write-Host "Failed to start Cosmos DB Emulator after multiple attempts"
                      throw
                  }
                  Write-Host "Waiting for emulator to be ready... (Attempt $attempts)"
                  Start-Sleep -Seconds 5
                  $attempts++
              }
          } while ($true)  
      - name: Install dependencies
        run: dotnet restore Tradgardsgolf.sln

      - name: Build
        run: dotnet build Tradgardsgolf.sln --no-restore

      - name: Run tests
        run: dotnet test Tradgardsgolf.sln --no-build
  
  build:
    runs-on: 'ubuntu-latest'    
    needs: test
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to registry
      uses: docker/login-action@v2
      with:
        registry: https://index.docker.io/v1/
        username: ${{ secrets.DOCKERIO_USERNAME }}
        password: ${{ secrets.DOCKERIO_PASSWORD }}

    - name: Build and push api image to registry
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ secrets.DOCKER_NAMESPACE }}/tradgardsgolf-api:${{ github.sha }}
        file: ./Tradgardsgolf.Api/Dockerfile
        
    - name: Build and push wasm image to registry
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ secrets.DOCKER_NAMESPACE }}/tradgardsgolf-wasm:${{ github.sha }}
        file: ./Tradgardsgolf.Blazor.Wasm/Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Bicep file
        run: |
          az deployment sub create \
            --template-file ./IaC/main.bicep \
            --location swedencentral \
            --name "GitHubDeployment" \
            --parameters namespace=${{ secrets.DOCKERIO_USERNAME }} tag=${{ github.sha }} resourceGroupName=${{ secrets.AZURE_RG }} \
  
  functions:
    runs-on: ubuntu-latest
    needs: build
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@main
      
      - name: Setup DotNet Environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ secrets.DOTNET_VERSION }}
          
      - name: Resolve Project Dependencies Using Dotnet
        shell: bash
        run: dotnet build Tradgardsgolf.AzureFunctions --configuration Release --output ./output
          
      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 'Deploy Azure Functions'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
          package: './output'
      
      
      