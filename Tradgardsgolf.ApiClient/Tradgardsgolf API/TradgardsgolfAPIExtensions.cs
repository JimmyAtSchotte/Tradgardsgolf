// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Tradgardsgolf.ApiClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for TradgardsgolfAPI.
    /// </summary>
    public static partial class TradgardsgolfAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static AuthenticationResponse Authenticate(this ITradgardsgolfAPI operations, CredentialsModel body = default(CredentialsModel))
            {
                return Task.Factory.StartNew(s => ((ITradgardsgolfAPI)s).AuthenticateAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthenticationResponse> AuthenticateAsync(this ITradgardsgolfAPI operations, CredentialsModel body = default(CredentialsModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AuthenticateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void IsAuthorized(this ITradgardsgolfAPI operations)
            {
                Task.Factory.StartNew(s => ((ITradgardsgolfAPI)s).IsAuthorizedAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task IsAuthorizedAsync(this ITradgardsgolfAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.IsAuthorizedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void CreateLogin(this ITradgardsgolfAPI operations, CreateLoginModel body = default(CreateLoginModel))
            {
                Task.Factory.StartNew(s => ((ITradgardsgolfAPI)s).CreateLoginAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateLoginAsync(this ITradgardsgolfAPI operations, CreateLoginModel body = default(CreateLoginModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateLoginWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
