<Blazorise.ThemeProvider Theme="@theme">
    <CascadingAuthenticationState>
        <CascadingStateProvider>
            <CascadingLocationProvider>
                <CascadingBlazoredModal Position="ModalPosition.Middle" DisableBackgroundCancel="true">
                    <Router AppAssembly="@typeof(Program).Assembly">
                        <Found Context="routeData">
                            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
                        </Found>
                        <NotFound>
                            <LayoutView Layout="@typeof(MainLayout)">
                                <p>Sorry, there's nothing at this address.</p>
                            </LayoutView>
                        </NotFound>
                    </Router>
                </CascadingBlazoredModal>
            </CascadingLocationProvider>
        </CascadingStateProvider>
    </CascadingAuthenticationState>
</Blazorise.ThemeProvider>

@code{

    private readonly Theme theme = CreateTheme(new ThemeColor(67, 160, 71));

    private static Theme CreateTheme(ThemeColor color)
    {
        var theme = new Theme
        {
            ColorOptions = new ThemeColorOptions(),
            BackgroundOptions = new ThemeBackgroundOptions(),
            TextColorOptions = new ThemeTextColorOptions(),
            BarOptions = new ThemeBarOptions()
        };

        theme.ColorOptions.Primary = color.ToRGBA();
        theme.BackgroundOptions.Primary = color.ToRGBA();
        theme.TextColorOptions.Primary = color.ToRGBA();

        theme.BarOptions.DarkColors = new ThemeBarColorOptions
        {
            BackgroundColor = color.ToRGBA(),
            Color = "#FFFFFF",
            BrandColorOptions = new ThemeBarBrandColorOptions
            {
                BackgroundColor = color.ToRGBA()
            },
            ItemColorOptions = new ThemeBarItemColorOptions
            {
                ActiveColor = "#FFFFFF",
                ActiveBackgroundColor = color.ToRGBA(),
                HoverColor = "#FFFFFF",
                HoverBackgroundColor = color.ToRGBA()
            }
        };

        theme.BarOptions.LightColors = new ThemeBarColorOptions
        {
            BackgroundColor = color.ToRGBA(),
            Color = "#000000",
            BrandColorOptions = new ThemeBarBrandColorOptions
            {
                BackgroundColor = color.ToRGBA(0.6)
            },
            ItemColorOptions = new ThemeBarItemColorOptions
            {
                ActiveColor = "#000000",
                ActiveBackgroundColor = color.ToRGBA(0.6),
                HoverColor = "#000000",
                HoverBackgroundColor = color.ToRGBA(0.6)
            }
        };

        theme.InputOptions = new ThemeInputOptions
        {
            CheckColor = color.ToRGBA(),
            SliderColor = color.ToRGBA()
        };

        return theme;
    }

    private class ThemeColor(int red, int green, int blue)
    {
        public string ToRGBA(double alpha = 1)
        {
            return $"rgba({red}, {green}, {blue}, {alpha})";
        }
    }

}