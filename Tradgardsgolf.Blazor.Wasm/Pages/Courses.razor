@page "/"
@inject IApiDispatcher ApiDispatcher;
@inject NavigationManager NavigationManager
@inject LocationService LocationService
@using Tradgardsgolf.Contracts.Course
@using Tradgardsgolf.Blazor.Wasm.Extensions
@using ChangeCourseImage = Tradgardsgolf.Blazor.Wasm.Shared.ChangeCourseImage
@implements IDisposable

<Loading IsLoading="_courses == null" LoadingText="Laddar banor i närheten...">
    @foreach (var course in _courses)
    {
        <CascadingCourse Course="course">
            <CascadingCourseStatistics>
                <CourseCard>
                    <CourseHead>
                        <CourseHeaderStatistics/>
                    </CourseHead>
                    <CourseContent>
                        <CourseStatistics></CourseStatistics>
                    </CourseContent>
                    <CourseButtons Visible="AllowPlay(course)">
                        <Button Clicked="async () => await SetupRound(course)" Color="Color.Primary" Float="Float.End">Spela <Icon Name="Blazorise.Icons.Material.MaterialIcons.GolfCourse"></Icon></Button>
                        <Dropdown Float="Float.Start">
                            <DropdownToggle Color="Color.Secondary">
                                <Icon Name="Blazorise.Icons.Material.MaterialIcons.Edit"></Icon>
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="() => ChangeImage(course)">Byt bild</DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </CourseButtons>
                </CourseCard>
            </CascadingCourseStatistics>
        </CascadingCourse>
    }
</Loading>


@code {

    [CascadingParameter]
    public CascadingStateProvider StateProvider { get; set; }
    
    [CascadingParameter]
    public CascadingLocationProvider LocationProvider { get; set; }
    
    [CascadingParameter] 
    public Blazored.Modal.Services.IModalService Modal { get; set; }

    private IEnumerable<CourseResponse> _models;
    private IList<CourseResponse> _courses;

    protected override async Task OnInitializedAsync()
    {
        _models = await ApiDispatcher.Dispatch(new ListAllCoursesCommand());
        
        OrderCoursesByDistance();

        LocationProvider.LocationChanged += LocationProviderOnLocationChanged;
    }

    private void LocationProviderOnLocationChanged(ComponentBase source)
    {
        OrderCoursesByDistance();
    }

    private void OrderCoursesByDistance()
    {
        var distanceOrdered = _models
            .OrderBy(x => x.GetDistance((double)LocationProvider.Location.Longitude, (double)LocationProvider.Location.Latitude))
            .ToList();
        
        if (_courses != null && _courses.SequenceEqual(distanceOrdered))
            return;
        
        _courses?.Clear();
        StateHasChanged();
        
        _courses = distanceOrdered;
        StateHasChanged();
    }

    private bool AllowPlay(CourseResponse courseResponse)
    {
        return courseResponse.GetDistance((double)LocationProvider.Location.Longitude, (double)LocationProvider.Location.Latitude) < 400;
    }

    private async Task SetupRound(CourseResponse course)
    {
        StateProvider.AppState.NewScorecard(this, course);
        await Task.Delay(1);
        NavigationManager.NavigateTo(nameof(SetupRound));
    }
    
    private void EditCourse(CourseResponse course)
    {
        NavigationManager.NavigateTo($"{nameof(EditCourse)}/{course.Id}");
    }

    public void Dispose()
    {
        LocationProvider.LocationChanged -= LocationProviderOnLocationChanged;
        ((IDisposable) StateProvider)?.Dispose();
    }

    private async Task ChangeImage(CourseResponse course)
    {
        var parameters = new ModalParameters
        {
            { nameof(ChangeCourseImage.Course), course }
        };
        
        var modal = Modal.Show<ChangeCourseImage>($"Byt bild för {course.Name}", parameters);
        var result = await modal.Result;
        if (result.Cancelled)
            return;

        if (result.Data is CourseResponse updatedCourse)
            _courses[_courses.IndexOf(course)] = updatedCourse;
    }

}