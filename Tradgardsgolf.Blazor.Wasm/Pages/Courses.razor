@page "/"
@inject IApiDispatcher ApiDispatcher;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Tradgardsgolf.Contracts.Course
@using ChangeCourseImage = Tradgardsgolf.BlazorWasm.Shared.ChangeCourseImage
@using Tradgardsgolf.BlazorWasm.ApiServices
@using Tradgardsgolf.BlazorWasm.Extensions
@using Tradgardsgolf.Contracts.Settings
@implements IDisposable


<Loading IsLoading="_courses == null" LoadingText="Laddar banor i närheten...">
    @foreach (var course in _courses)
    {
        <CascadingCourse Course="course">
            <CascadingCourseStatistics>
                <CourseCard>
                    <CourseHead>
                        <CourseHeaderStatistics/>
                    </CourseHead>
                    <CourseContent>
                        <CourseStatistics></CourseStatistics>
                    </CourseContent>
                    <CourseButtons Visible="ShowButtons(course)">
                        @if (AllowPlay(course))
                        {
                            <Button Clicked="async () => await SetupRound(course)" Color="Color.Primary" Float="Float.End">Spela <Icon Name="Blazorise.Icons.Material.MaterialIcons.GolfCourse"></Icon></Button>
                        }
                        
                        @if (AllowEdit(course))
                        {
                            <Dropdown Float="Float.Start">
                                <DropdownToggle Color="Color.Secondary">
                                    <Icon Name="Blazorise.Icons.Material.MaterialIcons.Settings"></Icon>
                                </DropdownToggle>
                                <DropdownMenu>
                                    <DropdownItem Clicked="() => ChangeImage(course)">Byt bild</DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        }
                      
                    </CourseButtons>
                </CourseCard>
            </CascadingCourseStatistics>
        </CascadingCourse>
    }
</Loading>


@code {

    [CascadingParameter]
    public CascadingStateProvider StateProvider { get; set; }
    
    [CascadingParameter]
    public Location Location { get; set; }
    
    [CascadingParameter] 
    public Blazored.Modal.Services.IModalService Modal { get; set; }
    
    private IEnumerable<CourseResponse> _models;
    private IList<CourseResponse> _courses;
    private int _allowPlayDistance;
    private AuthenticationState _authenticationState;
    private Guid _authenticatedGuid;


    protected override async Task OnInitializedAsync()
    {
        _allowPlayDistance = (await ApiDispatcher.Dispatch(new AllowPlayDistanceCommand())).Value;
        _models = await ApiDispatcher.Dispatch(new ListAllCoursesCommand());
        _authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        Guid.TryParse(_authenticationState.User.Claims.FirstOrDefault(x => x.Type == "oid")?.Value ?? "", out _authenticatedGuid);
        
        OrderCoursesByDistance();
   }

    private void OrderCoursesByDistance()
    {
        var distanceOrdered = _models
            .OrderBy(x => x.GetDistance((double)Location.Longitude, (double)Location.Latitude))
            .ToList();
        
        if (_courses != null && _courses.SequenceEqual(distanceOrdered))
            return;
        
        _courses?.Clear();
        StateHasChanged();
        
        _courses = distanceOrdered;
        StateHasChanged();
    }

    private bool AllowPlay(CourseResponse courseResponse)
    {
        return _allowPlayDistance < 0 ||
               courseResponse.GetDistance((double)Location.Longitude, (double)Location.Latitude) < _allowPlayDistance;
    }
    
    private bool AllowEdit(CourseResponse course)
    {
        return _authenticationState.User.Identity?.IsAuthenticated == true &&
               _authenticatedGuid == course.OwnerGuid;
    }

    private async Task SetupRound(CourseResponse course)
    {
        StateProvider.AppState.NewScorecard(this, course);
        await Task.Delay(1);
        NavigationManager.NavigateTo(nameof(SetupRound));
    }
    
    public void Dispose()
    {
       ((IDisposable) StateProvider)?.Dispose();
    }

    private async Task ChangeImage(CourseResponse course)
    {
        var parameters = new ModalParameters
        {
            { nameof(ChangeCourseImage.Course), course }
        };
        
        var modal = Modal.Show<ChangeCourseImage>($"Byt bild för {course.Name}", parameters);
        var result = await modal.Result;
        if (result.Cancelled)
            return;

        if (result.Data is CourseResponse updatedCourse)
            _courses[_courses.IndexOf(course)] = updatedCourse;
    }


    private bool ShowButtons(CourseResponse course)
    {
        return AllowPlay(course) || AllowEdit(course);
    }

}