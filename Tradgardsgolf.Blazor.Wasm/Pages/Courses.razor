@page "/"
@inject ICourseApiService CourseApiService
@inject NavigationManager NavigationManager
@inject LocationService LocationService
@implements IDisposable

@if (_courses == null)
{
    <Loading></Loading>
}
else
{
    @foreach (var course in _courses)
    {
        <CascadingCourse Course="course">
            <CascadingCourseStatistics>
                <CourseCard>
                    <CourseHead>
                        <CourseHeaderStatistics />
                    </CourseHead>
                    <CourseContent>
                        <CourseStatistics></CourseStatistics>
                    </CourseContent>
                    <CourseButtons Visible="AllowPlay(course)">
                        <Button Clicked="async () => await SetupRound(course)" Color="Color.Primary" Float="Float.Right">Spela <Icon Name="Blazorise.Icons.Material.MaterialIcons.GolfCourse"></Icon></Button>
                    </CourseButtons>
                </CourseCard>
            </CascadingCourseStatistics>
        </CascadingCourse>
    }
}

@code {

    [CascadingParameter]
    public CascadingStateProvider StateProvider { get; set; }
    
    [CascadingParameter]
    public CascadingLocationProvider LocationProvider { get; set; }

    private IEnumerable<CourseModel> _models;
    private IList<CourseModel> _courses;

    protected override async Task OnInitializedAsync()
    {
        _models = await CourseApiService.ListAll();

        OrderCoursesByDistance();

        LocationProvider.LocationChanged += LocationProviderOnLocationChanged;
    }

    private void LocationProviderOnLocationChanged(ComponentBase source)
    {
        OrderCoursesByDistance();
    }

    private void OrderCoursesByDistance()
    {
        var distanceOrdered = _models
            .OrderBy(x => x.GetDistance((double)LocationProvider.Location.Longitude, (double)LocationProvider.Location.Latitude))
            .ToList();
        
        if (_courses != null && _courses.SequenceEqual(distanceOrdered))
            return;
        
        _courses?.Clear();
        StateHasChanged();
        
        _courses = distanceOrdered;
        StateHasChanged();
    }

    private bool AllowPlay(CourseModel course)
    {
        return course.GetDistance((double)LocationProvider.Location.Longitude, (double)LocationProvider.Location.Latitude) < 400;
    }

    private async Task SetupRound(CourseModel courseModel)
    {
        StateProvider.AppState.NewScorecard(this, courseModel);
        await Task.Delay(1);
        NavigationManager.NavigateTo(nameof(SetupRound));
    }

    public void Dispose()
    {
        LocationProvider.LocationChanged -= LocationProviderOnLocationChanged;
        ((IDisposable) StateProvider)?.Dispose();
    }

}