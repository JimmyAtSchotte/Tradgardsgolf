@page "/"
@inject ICourseApiService CourseApiService
@inject NavigationManager NavigationManager
@inject LocationService LocationService
@implements IDisposable

@if (_courses == null)
{
    <Loading></Loading>
}
else
{
    @foreach (var course in _courses)
    {
        <CascadingCourse Course="course.Course">
            <CascadingCourseStatistics>
                <CourseCard>
                    <CourseHead>
                        <CourseHeaderStatistics />
                    </CourseHead>
                    <CourseContent>
                        <CourseStatistics></CourseStatistics>
                    </CourseContent>
                    <CourseButtons Visible="AllowPlay(course)">
                        <Button Clicked="async () => await SetupRound(course.Course)" Color="Color.Primary" Float="Float.Right">Spela <Icon Name="Blazorise.Icons.Material.MaterialIcons.GolfCourse"></Icon></Button>
                    </CourseButtons>
                </CourseCard>
            </CascadingCourseStatistics>
        </CascadingCourse>
    }
}

@code {

    [CascadingParameter]
    public CascadingStateProvider StateProvider { get; set; }
    
    [CascadingParameter]
    public CascadingLocationProvider LocationProvider { get; set; }

    private IEnumerable<CourseDistance> _courses;
    private Location _location;

    protected override async Task OnInitializedAsync()
    {
        _location = LocationProvider.Location;
        
        _courses = (await CourseApiService.ListAll())
            .Select(x =>
            { 
                var course = new CourseDistance(x);
                course.SetDistance((double)_location.Longitude, (double)_location.Latitude);
                return course;
            })
            .OrderBy(x => x.Distance);

        LocationProvider.LocationChanged += LocationProviderOnLocationChanged;
    }

    private void LocationProviderOnLocationChanged(ComponentBase source)
    {
        foreach (var course in _courses)
            course.SetDistance((double)LocationProvider.Location.Longitude, (double)LocationProvider.Location.Latitude);
        
        var distanceOrdered = _courses.OrderBy(x => x.Distance).ToList();

        if (_courses.SequenceEqual(distanceOrdered))
            return;

        _courses = distanceOrdered;

        StateHasChanged();
    }

    private bool AllowPlay(CourseDistance course)
    {
        return course.Distance < 400;
    }

    private async Task SetupRound(CourseModel courseModel)
    {
        StateProvider.AppState.NewScorecard(this, courseModel);
        await Task.Delay(1);
        NavigationManager.NavigateTo(nameof(SetupRound));
    }

    public void Dispose()
    {
        LocationProvider.LocationChanged -= LocationProviderOnLocationChanged;
        ((IDisposable) StateProvider)?.Dispose();
    }

    public class CourseDistance
    {
        public CourseModel Course { get; }
        public double Distance { get; set; }

        public CourseDistance(CourseModel course)
        {
            Course = course;
            Distance = double.MaxValue;
        }

        public void SetDistance(double longitude, double latitude)
        {
            Distance = GetDistance(longitude, latitude);
        }
        
        private double GetDistance(double longitude, double latitude)
        {
            if (Course.Name == "Testbanan")
                return 0;

            var d1 = Course.Latitude * (Math.PI / 180.0);
            var num1 = Course.Longitude * (Math.PI / 180.0);
            var d2 = (double) latitude * (Math.PI / 180.0);
            var num2 = (double) longitude * (Math.PI / 180.0) - num1;
            var d3 = Math.Pow(Math.Sin((d2 - d1) / 2.0), 2.0) + Math.Cos(d1) * Math.Cos(d2) * Math.Pow(Math.Sin(num2 / 2.0), 2.0);

            return 6376500.0 * (2.0 * Math.Atan2(Math.Sqrt(d3), Math.Sqrt(1.0 - d3)));
        }
    }

}