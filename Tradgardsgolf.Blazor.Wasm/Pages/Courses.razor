@page "/"
@inject ICourseApiService CourseApiService
@inject NavigationManager NavigationManager
@inject LocationService LocationService

@if (_courses == null)
{
    <Loading></Loading>
}
else
{
    @if (_location == null)
    {
        <Alert Color="Color.Warning">
            <AlertDescription>För att kunna spela så behöver du tillåta delning av din position.</AlertDescription>
        </Alert>
    }

    @foreach (var course in _courses)
    {
        <CascadingCourse Course="course">
            <CascadingCourseStatistics>
                <CourseCard>
                    <CourseHead>
                        <CourseHeaderStatistics />
                    </CourseHead>
                    <CourseContent>
                        <CourseStatistics></CourseStatistics>
                    </CourseContent>
                    <CourseButtons Visible="AllowPlay(course)">
                        <Button Clicked="async () => await SetupRound(course)" Color="Color.Primary" Float="Float.Right">Spela <Icon Name="Blazorise.Icons.Material.MaterialIcons.GolfCourse"></Icon></Button>
                    </CourseButtons>
                </CourseCard>
               
            </CascadingCourseStatistics>
        </CascadingCourse>
    }
}

@code {

    [CascadingParameter]
    public CascadingStateProvider State { get; set; }

    private IEnumerable<CourseModel> _courses;
    private Location _location;

    protected override async Task OnInitializedAsync()
    {
        _courses = await CourseApiService.ListAll();

        await LocationService.WatchLocation(LocationCallback);
    }

    private double Distance(CourseModel courseModel)
    {
        if (_location == null)
            return int.MaxValue;

        if (courseModel.Name == "Testbanan")
            return 0;

        var d1 = courseModel.Latitude * (Math.PI / 180.0);
        var num1 = courseModel.Longitude * (Math.PI / 180.0);
        var d2 = (double) _location.Latitude * (Math.PI / 180.0);
        var num2 = (double) _location.Longitude * (Math.PI / 180.0) - num1;
        var d3 = Math.Pow(Math.Sin((d2 - d1) / 2.0), 2.0) + Math.Cos(d1) * Math.Cos(d2) * Math.Pow(Math.Sin(num2 / 2.0), 2.0);

        return 6376500.0 * (2.0 * Math.Atan2(Math.Sqrt(d3), Math.Sqrt(1.0 - d3)));
    }

    private void LocationCallback(Location location)
    {
        _location = location;

        var distanceOrdered = _courses.OrderBy(Distance).ToList();

        if (_courses.SequenceEqual(distanceOrdered))
            return;

        _courses = distanceOrdered;

        StateHasChanged();
    }

    private bool AllowPlay(CourseModel courseModel)
    {
        return Distance(courseModel) < 400;
    }

    private async Task SetupRound(CourseModel courseModel)
    {
        State.AppState.NewScorecard(this, courseModel);
        await Task.Delay(1);
        NavigationManager.NavigateTo(nameof(SetupRound));
    }

}