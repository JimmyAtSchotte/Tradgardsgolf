@page "/"
@inject IApiDispatcher ApiDispatcher;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Blazorise.Icons.Material
@using Tradgardsgolf.BlazorWasm.ApiServices
@using Tradgardsgolf.BlazorWasm.Extensions
@using Tradgardsgolf.Contracts.Course
@using Tradgardsgolf.Contracts.Settings
@using IModalService = Blazored.Modal.Services.IModalService
@implements IDisposable


<Loading IsLoading="_courses == null" LoadingText="Laddar banor i närheten...">
    @foreach (var course in _courses)
    {
        <CascadingCourse Course="course">
            <CascadingCourseStatistics>
                <CourseCard>
                    <CourseHead>
                        <CourseHeaderStatistics/>
                    </CourseHead>
                    <CourseContent>
                        <CourseStatistics></CourseStatistics>
                    </CourseContent>
                    <CourseButtons>
                        <ConditionalComponent Condition="() => AllowPlay(course)" Name="Play">
                            <Button Clicked="async () => await SetupRound(course)" Color="Color.Primary" Float="Float.End">Spela <Blazorise.Icon Name="MaterialIcons.GolfCourse"></Blazorise.Icon></Button>
                        </ConditionalComponent>
                        <ConditionalComponent Condition="() => AllowEdit(course)" Name="Edit">
                            <Button Clicked="async () => await Edit(course)" Color="Color.Secondary"><Blazorise.Icon Name="MaterialIcons.Settings"></Blazorise.Icon></Button>
                        </ConditionalComponent>
                        <ConditionalComponent Condition="() => AllowClaimOwnerShip(course)" Name="ClaimOwnerShip">
                            <Button Clicked="async () => await ClaimOwnership(course)" Color="Color.Secondary">Ta ägarskap</Button>
                        </ConditionalComponent>
                    </CourseButtons>
                </CourseCard>
            </CascadingCourseStatistics>
        </CascadingCourse>
    }
</Loading>


@code {

    [CascadingParameter] public CascadingStateProvider StateProvider { get; set; }

    [CascadingParameter] public Location Location { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    private IEnumerable<CourseResponse> _models;
    private IList<CourseResponse> _courses;
    private int _allowPlayDistance;
    private AuthenticationState _authenticationState;

    protected override async Task OnInitializedAsync()
    {
        _allowPlayDistance = (await ApiDispatcher.Dispatch(new QueryAllowPlayDistance())).Value;
        _models = await ApiDispatcher.Dispatch(new QueryAllCourses());
        _authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        OrderCoursesByDistance();
    }

    private void OrderCoursesByDistance()
    {
        var distanceOrdered = _models
            .OrderBy(x => x.GetDistance((double)Location.Longitude, (double)Location.Latitude))
            .ToList();

        if (_courses != null && _courses.SequenceEqual(distanceOrdered))
            return;

        _courses?.Clear();
        StateHasChanged();

        _courses = distanceOrdered;
        StateHasChanged();
    }

    private bool AllowPlay(CourseResponse courseResponse)
    {
        return _allowPlayDistance <= 0 ||
               courseResponse.GetDistance((double)Location.Longitude, (double)Location.Latitude) < _allowPlayDistance;
    }

    private bool AllowEdit(CourseResponse course)
    {
        return _authenticationState.User.Identity?.IsAuthenticated == true &&
               _authenticationState.User.TryGetUserId(out var userId) &&
               userId == course.OwnerGuid;
    }

    private async Task SetupRound(CourseResponse course)
    {
        StateProvider.AppState.NewScorecard(this, course);
        await Task.Delay(1);
        NavigationManager.NavigateTo("setup-round");
    }

    private async Task ClaimOwnership(CourseResponse course)
    {
        var updatedCourse = await ApiDispatcher.Dispatch(new ClaimOwnershipCommand
        {
            Id = course.Id
        });

        _courses[_courses.IndexOf(course)] = updatedCourse;
    }

    public void Dispose()
    {
        ((IDisposable)StateProvider)?.Dispose();
    }
    
    private bool AllowClaimOwnerShip(CourseResponse course)
    {
        return AllowPlay(course) &&
               _authenticationState.User.Identity?.IsAuthenticated == true &&
               course.OwnerGuid == Guid.Empty &&
               _authenticationState.User.TryGetUserId(out _);
    }
    
    private async Task Edit(CourseResponse course)
    {
        NavigationManager.NavigateTo($"edit-course?CourseId={course.Id}");
    }

}