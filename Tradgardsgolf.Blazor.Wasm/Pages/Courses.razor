@page "/"
@inject IApiDispatcher apiDispatcher;
@inject NavigationManager NavigationManager
@inject LocationService LocationService
@using Tradgardsgolf.Contracts.Course
@using Newtonsoft.Json
@using Tradgardsgolf.Blazor.Wasm.Extensions
@implements IDisposable

<Loading IsLoading="_courses == null" LoadingText="Laddar banor i närheten...">
    @foreach (var course in _courses)
        {
            <CascadingCourse Course="course">
                <CascadingCourseStatistics>
                    <CourseCard>
                        <CourseHead>
                            <CourseHeaderStatistics />
                        </CourseHead>
                        <CourseContent>
                            <CourseStatistics></CourseStatistics>
                        </CourseContent>
                        <CourseButtons Visible="AllowPlay(course)">
                            <Button Clicked="async () => await SetupRound(course)" Color="Color.Primary" Float="Float.Right">Spela <Icon Name="Blazorise.Icons.Material.MaterialIcons.GolfCourse"></Icon></Button>
                        </CourseButtons>
                    </CourseCard>
                </CascadingCourseStatistics>
            </CascadingCourse>
        }
</Loading>


@code {

    [CascadingParameter]
    public CascadingStateProvider StateProvider { get; set; }
    
    [CascadingParameter]
    public CascadingLocationProvider LocationProvider { get; set; }

    private IEnumerable<CourseResponse> _models;
    private IList<CourseResponse> _courses;

    protected override async Task OnInitializedAsync()
    {
        _models = await apiDispatcher.Dispatch(new ListAllCoursesCommand());
        
        OrderCoursesByDistance();

        LocationProvider.LocationChanged += LocationProviderOnLocationChanged;
    }

    private void LocationProviderOnLocationChanged(ComponentBase source)
    {
        OrderCoursesByDistance();
    }

    private void OrderCoursesByDistance()
    {
        var distanceOrdered = _models
            .OrderBy(x => x.GetDistance((double)LocationProvider.Location.Longitude, (double)LocationProvider.Location.Latitude))
            .ToList();
        
        if (_courses != null && _courses.SequenceEqual(distanceOrdered))
            return;
        
        _courses?.Clear();
        StateHasChanged();
        
        _courses = distanceOrdered;
        StateHasChanged();
    }

    private bool AllowPlay(CourseResponse courseResponse)
    {
        return true;
        
        return courseResponse.GetDistance((double)LocationProvider.Location.Longitude, (double)LocationProvider.Location.Latitude) < 400;
    }

    private async Task SetupRound(CourseResponse courseResponseModel)
    {
        StateProvider.AppState.NewScorecard(this, courseResponseModel);
        await Task.Delay(1);
        NavigationManager.NavigateTo(nameof(SetupRound));
    }

    public void Dispose()
    {
        LocationProvider.LocationChanged -= LocationProviderOnLocationChanged;
        ((IDisposable) StateProvider)?.Dispose();
    }

}