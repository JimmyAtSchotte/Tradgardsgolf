@page "/Scorecard"
@using Tradgardsgolf.Contracts.Scorecard
@using Tradgardsgolf.Contracts.Statistics
@inject NavigationManager NavigationManager
@inject IApiDispatcher apiDispatcher
@inject IModalService Modal

<CascadingCourse Course="State.AppState.ScorecardState.Course">
    <CascadingCourseStatistics>
        <CourseCard>
            <CourseHead>
                <CourseHeaderStatistics />
            </CourseHead>
            <CourseContent>
                <Table>
                    <TableHeader>
                        <TableHeaderCell>Hål</TableHeaderCell>
                        @foreach (var playerScore in State.AppState.ScorecardState.PlayerScores)
                        {
                            <TableHeaderCell>
                                <Avatar Player="playerScore.Player"></Avatar>
                            </TableHeaderCell>
                        }
                    </TableHeader>
                    <TableBody>
                        @for (int i = 1; i <= State.AppState.ScorecardState.Course.Holes; i++)
                        {
                            var hole = i;

                            <TableRow>
                                <TableRowCell>@hole</TableRowCell>
                                @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                                {
                                    <TableRowCell>
                                        <Button Clicked="() => SetScore(player, hole)" Disabled="@Saving">@player.Scores[hole].ToString()</Button>
                                    </TableRowCell>
                                }
                            </TableRow>
                        }
                        <TableRow>
                            <TableRowCell>Totalt</TableRowCell>
                            @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                            {
                                <TableRowCell>@player.Total()</TableRowCell>
                            }
                        </TableRow>
                    </TableBody>
                </Table>
            </CourseContent>
            <CourseButtons Visible="State.AppState.ScorecardState.PlayerScores.Any()">
                <Button Clicked="async () => await ChangePlayers()" 
                        Disabled="@Saving" 
                        Float="Float.Left"
                        Color="Color.Warning">Byt spelare <Icon Name="Blazorise.Icons.Material.MaterialIcons.Sync"></Icon></Button>
                <Button Clicked="async () => await CompleteRound()" 
                        Disabled="@DisableCompleteButton" 
                        Loading="Saving"
                        Float="Float.Right"
                        Color="Color.Primary">Klart <Icon Name="Blazorise.Icons.Material.MaterialIcons.Check"></Icon></Button>
            </CourseButtons>
        </CourseCard>

    </CascadingCourseStatistics>
</CascadingCourse>


@code
{
    [CascadingParameter]
    public CascadingStateProvider State { get; set; }

    private bool DisableCompleteButton => State.AppState.ScorecardState.PlayerScores.Any(x => x.MissingScores()) || Saving;
    private bool Saving { get; set; }

    private async Task ChangePlayers()
    {
        if (Saving)
        {
            Saving = false;
            await State.AppState.ScorecardState.ResetScores(this);
        }

        NavigationManager.NavigateTo("SetupRound");
    }

    private async Task CompleteRound()
    {
        Saving = true;
        StateHasChanged();

        await apiDispatcher.Dispatch(new SaveScorecardCommand()
        {
            CourseId = State.AppState.ScorecardState.Course.Id,
            PlayerScores = State.AppState.ScorecardState.PlayerScores.Select(x => new PlayerScore()
            {
                Name = x.Player.Name,
                HoleScores = x.Scores.Select(score => score.Score.GetValueOrDefault())
            })
        });
        
        var playAgain = Modal.Show<PlayAgainModal>("Rundan är klar och sparad");
        
        var result = await playAgain.Result;
        if (result.Cancelled)
            return;
        
        var command = (PlayAgainModal.Results)result.Data;
        switch (command)
        {
            case PlayAgainModal.Results.No:
                NavigationManager.NavigateTo("");
                break;
            case PlayAgainModal.Results.ChangePlayers:
                await State.AppState.ScorecardState.ResetScores(this);
                NavigationManager.NavigateTo(nameof(SetupRound));
                break;
            case PlayAgainModal.Results.Yes:
                Saving = false;
                await State.AppState.ScorecardState.ResetScores(this);
                StateHasChanged();
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async Task SetScore(PlayerScores playerScores, int hole)
    {
        var modal = Modal.Show<HoleScoreModal>($"Hål {hole}: {playerScores.Player.Name}");
        var result = await modal.Result;
        if (result.Cancelled)
            return;

        var score = Convert.ToInt32(result.Data);
        await State.AppState.ScorecardState.SetScore(this, playerScores.Player.Name, hole, score);

        StateHasChanged();
    }
}