@page "/scorecard"
@using Blazorise.Icons.Material
@using Tradgardsgolf.BlazorWasm.ApiServices
@using Tradgardsgolf.Contracts.Scorecard
@using Tradgardsgolf.Contracts.Tournament
@using Icon = Blazorise.Icon
@using IModalService = Blazored.Modal.Services.IModalService
@inject NavigationManager NavigationManager
@inject IApiDispatcher apiDispatcher
@inject IModalService Modal

@if (State.AppState.ScorecardState is not null)
{
    <CascadingCourse Course="State.AppState.ScorecardState.CourseResponse">
        <CascadingCourseStatistics>
            <CourseCard>
                <CourseHead>
                    <CourseHeaderStatistics/>
                </CourseHead>
                <CourseContent>

                    @if (Tournaments.Any())
                    {
                        @if (SelectedTournament is null)
                        {
                            <Select TValue="Guid" SelectedValueChanged="@OnSelectedTournamentChanged">
                                <SelectItem Value="0">Välj tävling</SelectItem>

                                @foreach (var tournament in Tournaments)
                                {
                                    <SelectItem Value="@tournament.Id">@tournament.Name</SelectItem>
                                }
                            </Select>
                        }
                        else
                        {
                            <p>Tävling: @SelectedTournament.Name</p>
                        }
                    }

                    <Table>
                        <TableHeader>
                            <TableHeaderCell>Hål</TableHeaderCell>
                            @foreach (var playerScore in State.AppState.ScorecardState.PlayerScores)
                            {
                                <TableHeaderCell>
                                    <Avatar Player="playerScore.PlayerResponse"></Avatar>
                                </TableHeaderCell>
                            }
                        </TableHeader>
                        <TableBody>
                            @for (var i = 1; i <= State.AppState.ScorecardState.CourseResponse.Holes; i++)
                            {
                                var hole = i;

                                <TableRow>
                                    <TableRowCell>@hole</TableRowCell>
                                    @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                                    {
                                        <TableRowCell>
                                            <Button Clicked="() => SetScore(player, hole)" Disabled="@Saving">@player.Scores[hole].ToString()</Button>
                                        </TableRowCell>
                                    }
                                </TableRow>
                            }
                            <TableRow>
                                <TableRowCell>Totalt</TableRowCell>
                                @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                                {
                                    <TableRowCell>@player.Total()</TableRowCell>
                                }
                            </TableRow>

                            @if (SelectedTournament != null)
                            {
                                <TableRow>
                                    <TableRowCell>Tävling</TableRowCell>
                                    @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                                    {
                                        <TableRowCell>@GetTournamentScore(player)</TableRowCell>
                                    }
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CourseContent>
                <CourseButtons>
                    <Button Clicked="async () => await ChangePlayers()"
                            Disabled="@Saving"
                            Float="Float.Start"
                            Color="Color.Warning">
                        Byt spelare <Blazorise.Icon Name="MaterialIcons.Sync"></Blazorise.Icon>
                    </Button>
                    <Button Clicked="async () => await CompleteRound()"
                            Disabled="@DisableCompleteButton"
                            Loading="Saving"
                            Float="Float.End"
                            Color="Color.Primary">
                        Klart <Blazorise.Icon Name="MaterialIcons.Check"></Blazorise.Icon>
                    </Button>
                </CourseButtons>
            </CourseCard>

        </CascadingCourseStatistics>
    </CascadingCourse>
}


@code
{
    [CascadingParameter] public CascadingStateProvider State { get; set; }

    private bool DisableCompleteButton => State.AppState.ScorecardState.PlayerScores.Any(x => x.MissingScores()) || Saving;
    private bool Saving { get; set; }

    private IEnumerable<Tournament> Tournaments { get; set; } = new List<Tournament>();
    private List<TournamentScore> TournamentScores { get; set; } = new();
    private Tournament SelectedTournament { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (State.AppState.ScorecardState is null)
        {
            NavigationManager.NavigateTo("");
            return;
        }

        Tournaments = await apiDispatcher.Dispatch(new QueryTodaysTournamentsCommand
        {
            CourseId = State.AppState.ScorecardState.CourseResponse.Id
        });

        await base.OnInitializedAsync();
    }

    private async Task ChangePlayers()
    {
        if (Saving)
        {
            Saving = false;
            await State.AppState.ScorecardState.ResetScores(this);
        }

        NavigationManager.NavigateTo("SetupRound");
    }

    private async Task CompleteRound()
    {
        Saving = true;
        StateHasChanged();

        var roundScore = await apiDispatcher.Dispatch(new SaveScorecardCommand
        {
            CourseId = State.AppState.ScorecardState.CourseResponse.Id,
            Revision = State.AppState.ScorecardState.CourseResponse.Revision,
            PlayerScores = State.AppState.ScorecardState.PlayerScores.Select(x => new PlayerScore
            {
                Name = x.PlayerResponse.Name,
                HoleScores = x.Scores.Select(score => score.Score.GetValueOrDefault())
            })
        });

        if (SelectedTournament is not null)
        {
            await apiDispatcher.Dispatch(new AddTournamentRoundScoreCommand
            {
                TournamentId = SelectedTournament.Id,
                ScorecardId = roundScore.Id
            });
        }

        var playAgain = Modal.Show<PlayAgainModal>("Rundan är klar och sparad");

        var result = await playAgain.Result;
        if (result.Cancelled)
            return;

        var command = (PlayAgainModal.Results)result.Data;
        switch (command)
        {
            case PlayAgainModal.Results.No:
                NavigationManager.NavigateTo("");
                break;
            case PlayAgainModal.Results.ChangePlayers:
                await State.AppState.ScorecardState.ResetScores(this);
                NavigationManager.NavigateTo("setup-round");
                break;
            case PlayAgainModal.Results.Yes:
                Saving = false;
                await State.AppState.ScorecardState.ResetScores(this);
                StateHasChanged();
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async Task SetScore(PlayerScores playerScores, int hole)
    {
        var modal = Modal.Show<HoleScoreModal>($"Hål {hole}: {playerScores.PlayerResponse.Name}");
        var result = await modal.Result;
        if (result.Cancelled)
            return;

        var score = Convert.ToInt32(result.Data);
        await State.AppState.ScorecardState.SetScore(this, playerScores.PlayerResponse.Name, hole, score);

        StateHasChanged();
    }

    private int GetTournamentScore(PlayerScores player)
    {
        return player.Total() + (TournamentScores.FirstOrDefault(x => x.Name == player.PlayerResponse.Name)?.Score ?? 0);
    }

    private async Task OnSelectedTournamentChanged(Guid tournamentId)
    {
        SelectedTournament = Tournaments.FirstOrDefault(x => x.Id == tournamentId);
        TournamentScores = (await apiDispatcher.Dispatch(new QueryTournamentScores
        {
            TournamentId = tournamentId
        }) ?? Array.Empty<TournamentScore>()).ToList();
    }
}