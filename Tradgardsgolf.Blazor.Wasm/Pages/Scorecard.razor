@page "/Scorecard"
@inject NavigationManager NavigationManager
@inject ICourseApiService CourseApiService
@inject IModalService Modal

<CourseCard Course="State.AppState.ScorecardState.Course">
    <CourseHead></CourseHead>
    <CourseContent>
        <table class="centered">
            <thead>
            <tr>
                <th>Hål</th>
                @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                {
                    <th>
                        <Avatar Player="player.Player"></Avatar>
                    </th>
                }
            </tr>
            </thead>

            <tbody>
            @for (int i = 1; i <= State.AppState.ScorecardState.Course.Holes; i++)
            {
                var hole = i;

                <tr>
                    <td>@hole</td>
                    @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                    {
                        <td align="center">
                            <Button Text="@player.Scores[hole].ToString()" OnClick="() => SetScore(player, hole)" Disabled="@Saving"></Button>
                        </td>
                    }
                </tr>
            }

            <tr>
                <td>Totalt</td>
                @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                {
                    <td>@player.Total()</td>
                }
            </tr>
            </tbody>
        </table>
    </CourseContent>
    <CourseButtons>
        <ImageButton OnClick="async () => await ChangePlayers()" Text="Byt spelare" Icon="sync" Disabled="@Saving"></ImageButton>
        <ImageButton OnClick="() => CompleteRound()" Text="Klart" Icon="check" Disabled="@DisableCompleteButton"></ImageButton>
    </CourseButtons>
</CourseCard>

@if (@Saving && !@DisplayPlayAgain)
{
    <div class="card green lighten-5">
        <div class="card-content">
            <span class="card-title">Sparar</span>
        </div>
    </div>
}

@if (@DisplayPlayAgain)
{
    <div class="card green lighten-5">
        <div class="card-content">
            <span class="card-title">Rundan är klar och sparad</span>
        </div>
        <div class="card-action">
            <ImageButton OnClick="async () => await ChangePlayers()" Text="Byt spelare" Icon="sync"></ImageButton>
            <ImageButton OnClick="async () => await PlayAgain()" Text="Spela igen" Icon="play_arrow"></ImageButton>
        </div>
    </div>
}





@code
{
    [CascadingParameter] 
    public CascadingStateProvider State { get; set; }
    
    private bool DisableCompleteButton => State.AppState.ScorecardState.PlayerScores.Any(x => x.MissingScores()) || Saving;
    private bool Saving { get; set; }

    private bool DisplayPlayAgain { get; set; }

    private async Task ChangePlayers()
    {
        if (Saving)
        {
            Saving = false;
            await State.AppState.ScorecardState.ResetScores(this);
        }
       
        NavigationManager.NavigateTo("SetupRound");
    }

    private void CompleteRound()
    {
        Saving = true;
        StateHasChanged();

        CourseApiService.SaveScorecard(State.AppState.ScorecardState.Course, 
            State.AppState.ScorecardState.PlayerScores);

        DisplayPlayAgain = true;
        StateHasChanged();
    }

    private async Task PlayAgain()
    {
        Saving = false;
        DisplayPlayAgain = false;

        await State.AppState.ScorecardState.ResetScores(this);
        
        StateHasChanged();
    }


    private async Task SetScore(PlayerScore playerScore, int hole)
    {
        var modal = Modal.Show<HoleScoreModal>($"Hur gick det för {playerScore.Player.Name} på hål {hole}?");
        var result = await modal.Result;
        if(result.Cancelled)
            return;

        var score = Convert.ToInt32(result.Data);
        await State.AppState.ScorecardState.SetScore(this, playerScore.Player.Name, hole, score);

        StateHasChanged();
    }
}