@page "/Scorecard"
@inject NavigationManager NavigationManager
@inject ICourseApiService CourseApiService

<CourseCard Course="State.AppState.ScorecardState.Course">
    <CourseHead></CourseHead>
    <CourseContent>
        <table class="centered">
            <thead>
            <tr>
                <th>Hål</th>
                @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                {
                    <th>
                        <Avatar Player="player.Player"></Avatar>
                    </th>
                }
            </tr>
            </thead>

            <tbody>
            @for (int i = 1; i <= State.AppState.ScorecardState.Course.Holes; i++)
            {
                var hole = i;

                <tr>
                    <td>@hole</td>
                    @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                    {
                        <td align="center">
                            <Button Text="@player.Scores[hole].ToString()" OnClick="() => SetScore(player, hole)" Disabled="@Saving"></Button>
                        </td>
                    }
                </tr>
            }

            <tr>
                <td>Totalt</td>
                @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                {
                    <td>@player.Total()</td>
                }
            </tr>
            </tbody>
        </table>
    </CourseContent>
    <CourseButtons>
        <ImageButton OnClick="async () => await ChangePlayers()" Text="Byt spelare" Icon="sync" Disabled="@Saving"></ImageButton>
        <ImageButton OnClick="() => CompleteRound()" Text="Klart" Icon="check" Disabled="@DisableCompleteButton"></ImageButton>
    </CourseButtons>
</CourseCard>

@if (@Saving && !@DisplayPlayAgain)
{
    <div class="card green lighten-5">
        <div class="card-content">
            <span class="card-title">Sparar</span>
        </div>
    </div>
}

@if (@DisplayPlayAgain)
{
    <div class="card green lighten-5">
        <div class="card-content">
            <span class="card-title">Rundan är klar och sparad</span>
        </div>
        <div class="card-action">
            <ImageButton OnClick="async () => await ChangePlayers()" Text="Byt spelare" Icon="sync"></ImageButton>
            <ImageButton OnClick="async () => await PlayAgain()" Text="Spela igen" Icon="play_arrow"></ImageButton>
        </div>
    </div>
}


<Modal @bind-Open="IsModalOpened" Close="OnClose">
    <div class="modal" style="display: block; position: relative">
        <div class="modal-content">
            <h4>Hur gick det för @EditPlayerScore?.Player.Name på hål @EditHole?</h4>
            <div class="container">
                <form method="dialog">
                    <div class="row">
                        @for (var i = 1; i <= ModalMaxScore; i++)
                        {
                            <div class="col s4 center-align" style="margin-bottom: 1rem;">
                                <Button Text="@i.ToString()" Value="@i.ToString()"></Button>
                            </div>
                        }
                    </div>
                </form>
            </div>
        </div>

        <div class="modal-footer">
            <ImageButton OnClick="() => AddModalMaxScore()" Text="Det gick inge vidare..." Icon="sentiment_dissatisfied"></ImageButton>
        </div>
    </div>

</Modal>


@code
{
    [CascadingParameter] 
    public CascadingStateProvider State { get; set; }
    
    public bool IsModalOpened { get; set; }
    public string SelectedButton { get; set; }

    private PlayerScore EditPlayerScore { get; set; }
    private int EditHole { get; set; }

    private int ModalMaxScore { get; set; } = 12;

    private bool DisableCompleteButton => State.AppState.ScorecardState.PlayerScores.Any(x => x.MissingScores()) || Saving;
    private bool Saving { get; set; }

    private bool DisplayPlayAgain { get; set; }
       

    private async Task ChangePlayers()
    {
        if (Saving)
        {
            Saving = false;
            await State.AppState.ScorecardState.ResetScores(this);
        }
       
        NavigationManager.NavigateTo("SetupRound");
    }

    private void CompleteRound()
    {
        Saving = true;
        StateHasChanged();

        CourseApiService.SaveScorecard(State.AppState.ScorecardState.Course, 
            State.AppState.ScorecardState.PlayerScores);

        DisplayPlayAgain = true;
        StateHasChanged();
    }

    private async Task PlayAgain()
    {
        Saving = false;
        DisplayPlayAgain = false;

        await State.AppState.ScorecardState.ResetScores(this);
        
        StateHasChanged();
    }


    private void SetScore(PlayerScore playerScore, int hole)
    {
        if (IsModalOpened)
            return;

        EditPlayerScore = playerScore;
        EditHole = hole;

        IsModalOpened = true;

        StateHasChanged();
    }

    private async Task OnClose(string value)
    {
        EditPlayerScore.Scores[EditHole].Score = Convert.ToInt32(value);

        await State.AppState.ScorecardState.SetScore(this, EditPlayerScore.Player.Name, EditHole, Convert.ToInt32(value));
        
        StateHasChanged();
    }

    private void AddModalMaxScore()
    {
        ModalMaxScore += 3;

        StateHasChanged();
    }
}