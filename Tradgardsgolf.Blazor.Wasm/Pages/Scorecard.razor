@page "/Scorecard"
@inject NavigationManager NavigationManager
@inject ICourseApiService CourseApiService
@inject IModalService Modal

<CascadingCourse Course="State.AppState.ScorecardState.CourseModel">
    <CascadingCourseStatistics>
        <CourseCard>
            <CourseHead>
                <CourseHeaderStatistics />
            </CourseHead>
            <CourseContent>
                <Table>
                    <TableHeader>
                        <TableHeaderCell>Hål</TableHeaderCell>
                        @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                        {
                            <TableHeaderCell>
                                <Avatar Player="player.Player"></Avatar>
                            </TableHeaderCell>
                        }
                    </TableHeader>
                    <TableBody>
                        @for (int i = 1; i <= State.AppState.ScorecardState.CourseModel.Holes; i++)
                        {
                            var hole = i;

                            <TableRow>
                                <TableRowCell>@hole</TableRowCell>
                                @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                                {
                                    <TableRowCell>
                                        <Button Clicked="() => SetScore(player, hole)" Disabled="@Saving">@player.Scores[hole].ToString()</Button>
                                    </TableRowCell>
                                }
                            </TableRow>
                        }
                        <TableRow>
                            <TableRowCell>Totalt</TableRowCell>
                            @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                            {
                                <TableRowCell>@player.Total()</TableRowCell>
                            }
                        </TableRow>
                    </TableBody>
                </Table>
            </CourseContent>
            <CourseButtons Visible="State.AppState.ScorecardState.PlayerScores.Any()">
                <Button Clicked="async () => await ChangePlayers()" 
                        Disabled="@Saving" 
                        Float="Float.Left"
                        Color="Color.Warning">Byt spelare <Icon Name="Blazorise.Icons.Material.MaterialIcons.Sync"></Icon></Button>
                <Button Clicked="() => CompleteRound()" 
                        Disabled="@DisableCompleteButton" 
                        Float="Float.Right"
                        Color="Color.Primary">Klart <Icon Name="Blazorise.Icons.Material.MaterialIcons.Check"></Icon></Button>
            </CourseButtons>
        </CourseCard>

    </CascadingCourseStatistics>
</CascadingCourse>

@if (@Saving && !@DisplayPlayAgain)
{
    <div class="card green lighten-5">
        <div class="card-content">
            <span class="card-title">Sparar</span>
        </div>
    </div>
}

@if (@DisplayPlayAgain)
{
    <div class="card green lighten-5">
        <div class="card-content">
            <span class="card-title">Rundan är klar och sparad</span>
        </div>
        <div class="card-action">
            <ImageButton OnClick="async () => await ChangePlayers()" Text="Byt spelare" Icon="sync"></ImageButton>
            <ImageButton OnClick="async () => await PlayAgain()" Text="Spela igen" Icon="play_arrow"></ImageButton>
        </div>
    </div>
}


@code
{
    [CascadingParameter]
    public CascadingStateProvider State { get; set; }

    private bool DisableCompleteButton => State.AppState.ScorecardState.PlayerScores.Any(x => x.MissingScores()) || Saving;
    private bool Saving { get; set; }

    private bool DisplayPlayAgain { get; set; }

    private async Task ChangePlayers()
    {
        if (Saving)
        {
            Saving = false;
            await State.AppState.ScorecardState.ResetScores(this);
        }

        NavigationManager.NavigateTo("SetupRound");
    }

    private void CompleteRound()
    {
        Saving = true;
        StateHasChanged();

        CourseApiService.SaveScorecard(State.AppState.ScorecardState.CourseModel,
            State.AppState.ScorecardState.PlayerScores);

        DisplayPlayAgain = true;
        StateHasChanged();
    }

    private async Task PlayAgain()
    {
        Saving = false;
        DisplayPlayAgain = false;

        await State.AppState.ScorecardState.ResetScores(this);

        StateHasChanged();
    }


    private async Task SetScore(PlayerScoreModel playerScoreModel, int hole)
    {
        var modal = Modal.Show<HoleScoreModal>($"Hål {hole}: {playerScoreModel.Player.Name}");
        var result = await modal.Result;
        if (result.Cancelled)
            return;

        var score = Convert.ToInt32(result.Data);
        await State.AppState.ScorecardState.SetScore(this, playerScoreModel.Player.Name, hole, score);

        StateHasChanged();
    }
}