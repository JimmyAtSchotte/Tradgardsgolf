@page "/SetupRound"
@using Tradgardsgolf.Contracts.Players
@inject IApiDispatcher ApiDispatcher
@inject NavigationManager NavigationManager
@inject IModalService Modal

<CascadingCourse Course="State.AppState.ScorecardState.CourseResponse">
    <CascadingCourseStatistics>
        <CourseCard>
            <CourseHead>
                <CourseHeaderStatistics/>
            </CourseHead>
            <CourseContent>
                @if (State.AppState.ScorecardState.PlayerScores.Any())
                {
                    <CardTitle>Valda spelare</CardTitle>

                    @foreach (var player in State.AppState.ScorecardState.PlayerScores)
                    {
                        <PlayerListItem Player="player.PlayerResponse">
                            <Button Clicked="async () => await RemovePlayer(player.PlayerResponse.Name)" Float="Float.Right" Color="Color.Danger">
                                <Icon Name="Blazorise.Icons.Material.MaterialIcons.Delete"></Icon>
                            </Button>
                        </PlayerListItem>
                    }
                }
                else
                {
                    <CardTitle>Börja med att lägga till spelare</CardTitle>
                }
            </CourseContent>
            <CourseButtons>
                <Button Clicked="async () => await NewPlayer()"
                    Color="Color.Primary"
                        Float="Float.Left">Lägg till <Icon Name="Blazorise.Icons.Material.MaterialIcons.Add"></Icon></Button> 
                <Button Clicked="async () => await Play()" 
                        Float="Float.Right" 
                        Disabled="!State.AppState.ScorecardState.PlayerScores.Any()"
                        Color="Color.Primary">Börja spela <Icon Name="Blazorise.Icons.Material.MaterialIcons.PlayArrow"></Icon></Button>
            </CourseButtons>
        </CourseCard>

    </CascadingCourseStatistics>
</CascadingCourse>

@if (_availablePlayers == null)
{
    <Loading></Loading>
}
else if (AvailablePlayers.Any())
{
    <Card Margin="Margin.Is2.OnMobile.Is5.OnDesktop">
        <CardBody>
            <CardTitle>Har tidigare spelat på @State.AppState.ScorecardState.CourseResponse.Name</CardTitle>
            @foreach (var player in AvailablePlayers)
            {
                <PlayerListItem Player="player">
                    <Button Clicked="async () => await AddPlayer(player.Name)" Float="Float.Right" Color="Color.Primary">
                        <Icon Name="Blazorise.Icons.Material.MaterialIcons.Add"></Icon>
                    </Button>
                </PlayerListItem>
            }
        </CardBody>
    </Card>
}

@code
{
    [CascadingParameter]
    public CascadingStateProvider State { get; set; }

    private string PlayerName { get; set; }
    private IEnumerable<PlayerResponse> _availablePlayers;

    private IEnumerable<PlayerResponse> AvailablePlayers => _availablePlayers?
        .Where(x => State.AppState.ScorecardState.PlayerScores.All(player => player.PlayerResponse.Name != x.Name)) ?? Enumerable.Empty<PlayerResponse>();

    protected override async Task OnInitializedAsync()
    {
        _availablePlayers = (await ApiDispatcher.Dispatch(new HasPlayedOnCourseCommand()
        {
            CourseId = State.AppState.ScorecardState.CourseResponse.Id
        }) ?? Array.Empty<PlayerResponse>()).ToList();
        
        await base.OnInitializedAsync();
    }

    private async Task AddPlayer(string player)
    {
        if (string.IsNullOrWhiteSpace(player))
            return;

        await State.AppState.ScorecardState.AddPlayer(this, player);
        PlayerName = string.Empty;
        StateHasChanged();
    }

    private async Task RemovePlayer(string player)
    {
        await State.AppState.ScorecardState.RemovePlayer(this, player);
        StateHasChanged();
    }

    private async Task Play()
    {
        if (!State.AppState.ScorecardState.PlayerScores.Any())
            return;
        await Task.Delay(1);
        NavigationManager.NavigateTo("Scorecard");
    }

    private async Task NewPlayer()
    {
        var playAgain = Modal.Show<NewPlayerModal>("Lägg till ny spelare");
        
        var result = await playAgain.Result;
        if (result.Cancelled)
            return;

        await AddPlayer(result.Data.ToString());

    }
}