@page "/SetupRound"
@using Tradgardsgolf.Api.Shared
@inject ICourseApiService CourseApiService
@inject NavigationManager NavigationManager

<CourseCard Course="State.AppState.ScorecardState.CourseModel">
    <CourseHead></CourseHead>
    <CourseContent Title="Börja med att lägga till spelare" Visible="!State.AppState.ScorecardState.PlayerScores.Any()"></CourseContent>
    <CourseContent Title="Valda spelare" Visible="State.AppState.ScorecardState.PlayerScores.Any()">
        <List>
            @foreach (var player in State.AppState.ScorecardState.PlayerScores)
            {
                <PlayerListItem Player="player.Player">
                    <IconButton OnClick="async () => await RemovePlayer(player.Player.Name)" Icon="delete"></IconButton>
                </PlayerListItem>
            }
        </List>
    </CourseContent>
    <CourseButtons Visible="State.AppState.ScorecardState.PlayerScores.Any()">
        <ImageButton OnClick="async () => await Play()" Text="Börja spela" Icon="play_arrow"></ImageButton>
    </CourseButtons>
</CourseCard>

@if (_availablePlayers == null)
{
    <Loading></Loading>
}
else if (AvailablePlayers.Any())
{
    <div class="card">
        <div class="card-content">
            <span class="card-title">Har tidigare spelat på @State.AppState.ScorecardState.CourseModel.Name</span>     
            <List>
                @foreach (var player in AvailablePlayers)
                {
                    <PlayerListItem Player="player">
                        <IconButton OnClick="async () => await AddPlayer(player.Name)" Icon="add"></IconButton>
                    </PlayerListItem>
                }
            </List>
        </div>
    </div>
}

<div class="card green lighten-5">
    <div class="card-content">
        <span class="card-title">Ny spelare</span>
        <div class="input-field">
            <input @bind="PlayerName" id="new_player" type="text" />
            <label for="new_player">Namn</label>
        </div>
    </div>
    <div class="card-action">
        <ImageButton OnClick="async () => await AddPlayer(PlayerName)" Text="Lägg till" Icon="add"></ImageButton>
    </div>
</div>

@code 
{
    [CascadingParameter] 
    public CascadingStateProvider State { get; set; }
    
    private string PlayerName { get; set; }
    private IEnumerable<PlayerModel> _availablePlayers;
    private IEnumerable<PlayerModel> AvailablePlayers => _availablePlayers
        .Where(x => State.AppState.ScorecardState.PlayerScores.All(player => player.Player.Name != x.Name)) ?? Enumerable.Empty<PlayerModel>();

    protected override async Task OnInitializedAsync()
    {
        _availablePlayers = (await CourseApiService.Players(State.AppState.ScorecardState.CourseModel)).ToList();
        
        await base.OnInitializedAsync();
    }

    private async Task AddPlayer(string player)
    {
        if (string.IsNullOrWhiteSpace(player))
            return;

        await State.AppState.ScorecardState.AddPlayer(this, player);
        PlayerName = string.Empty;
        StateHasChanged();
    }

    private async Task RemovePlayer(string player)
    {
        await State.AppState.ScorecardState.RemovePlayer(this, player);
        StateHasChanged();
    }

    private async Task Play()
    {
        if (!State.AppState.ScorecardState.PlayerScores.Any())
            return;
        await Task.Delay(1);
        NavigationManager.NavigateTo("Scorecard");
    }
    
}






