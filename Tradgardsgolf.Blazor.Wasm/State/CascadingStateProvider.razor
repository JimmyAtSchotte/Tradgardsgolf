@implements IDisposable
@inject ILocalStorageService LocalStorageService

@if (_hasLoaded)
{
    <CascadingValue Value="this">@ChildContent</CascadingValue>
}

@code {
    private bool _hasLoaded;

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public AppState AppState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        AppState = await ReadAppSate();
        AppState.StateChanged += async (source, property) => await SaveAppStateAsync();
        _hasLoaded = true;
    }

    private async Task<AppState> ReadAppSate()
    {
        try
        {
            var state = await LocalStorageService.GetItemAsync<AppState>(nameof(AppState));

            if (state.IsValid())
                return state;
        }
        catch (Exception e)
        {
            // ignored
        }

        return new AppState();
    }

    private async Task SaveAppStateAsync()
    {
        await LocalStorageService.SetItemAsync(nameof(AppState), AppState);
    }

    void IDisposable.Dispose()
    {
        if (AppState != null) AppState.StateChanged -= async (source, property) => await SaveAppStateAsync();
    }

}