@using Tradgardsgolf.Blazor.Wasm.State
@using System.Text.Json
@implements IDisposable
@inject ILocalStorageService LocalStorageService

@if (_hasLoaded)
{
    <CascadingValue Value="this">@ChildContent</CascadingValue>
}

@code {
    private bool _hasLoaded;
    
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    [Parameter]
    public AppState AppState { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        AppState = await ReadAppSate();
        AppState.StateChanged += async (source, property) => await SaveAppStateAsync();

        await SaveAppStateAsync();
        
        _hasLoaded = true;
    }

    private async Task<AppState> ReadAppSate()
    {
        try
        {
            var json = await LocalStorageService.GetItemAsStringAsync(nameof(AppState));

            if (!string.IsNullOrEmpty(json))
            {
                var storedState = JsonSerializer.Deserialize<AppState>(json);

                if (storedState.IsValid())
                    return storedState;
            }
        }
        catch (Exception e)
        {
            // ignored
        }

        return new AppState();
    }

    private async Task SaveAppStateAsync()
    {
        try
        {
            var json = JsonSerializer.Serialize(AppState);
            await LocalStorageService.SetItemAsync(nameof(AppState), json);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }

    void IDisposable.Dispose()
    {
        if (AppState != null) AppState.StateChanged -= async (source, property) => await SaveAppStateAsync();
    }

}