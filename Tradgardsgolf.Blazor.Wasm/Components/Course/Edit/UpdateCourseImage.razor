@using System.IO
@using Blazorise.Icons.Material
@using Tradgardsgolf.BlazorWasm.ApiServices
@using Tradgardsgolf.Contracts.Course
@inject IApiDispatcher ApiDispatcher;


<Card Margin="Margin.Is2.OnMobile.Is5.OnDesktop">
    <CardBody>
        <CardTitle>Ändra bild</CardTitle>
        
        @if (File is null)
        {
            <Progress Value="_progress" Display="@(_stage == Stage.Uploading ? Display.Block : Display.None)"></Progress>
            <Field Display="@(_stage == Stage.SelectFile ? Display.Block : Display.None)">
                <FieldLabel>Ladda upp bild</FieldLabel>
                <FileEdit Changed="@OnFileUpload" Progressed="@OnProgressed" Filter="image/*"/>
            </Field>
        }
        else
        {
            <Field>
                <FieldLabel>Bildbeskärning</FieldLabel>
                <Cropper
                    ImageFile="File"
                    RequireAspectRatio="true"
                    AspectRatio="0.525"
                    Quality="80"
                    InitCropWidth="300"
                    CropperHeight="300"
                    @ref="_cropper">
                </Cropper>
            </Field>
            
            
           
        }
    </CardBody>

    @if (File is not null)
    {
        <CardFooter Class="bg-light">
            <Button Color="Color.Secondary" Float="Float.Start" Clicked="() => ResetImage()"><Blazorise.Icon Name="MaterialIcons.Repeat"/></Button>
            <Button Color="Color.Primary" Float="Float.End" Clicked="async () => await SaveImage()">Spara bild <Blazorise.Icon Name="MaterialIcons.Save"/></Button>
        </CardFooter>
    }
</Card>



@code {

    [Parameter] public CourseResponse? Course { get; set; }
    [Parameter] public Action<CourseResponse>? OnSave { get; set; }

    private IBrowserFile? File { get; set; }
    private Cropper _cropper;
    private string? _fileExtension;
    private int _progress;
    private Stage _stage = Stage.SelectFile;

    private enum Stage
    {
        SelectFile,
        Uploading,
        Cropping
    }


    private async Task OnFileUpload(FileChangedEventArgs e)
    {
        _stage = Stage.Uploading;
        StateHasChanged();
        
        var file = e.Files.FirstOrDefault();

        if (file == null)
            return;

        using var result = new MemoryStream();
        await file.OpenReadStream(long.MaxValue).CopyToAsync(result);
        File = new StreamFile(new MemoryStream(result.ToArray()));

        _fileExtension = Path.GetExtension(file.Name);
        
        _stage = Stage.Cropping;
        StateHasChanged();
    }
    
    private void OnProgressed(FileProgressedEventArgs e)
    {
        _progress = (int)e.Progress;
        StateHasChanged();
        
        Console.WriteLine( $"File: {e.File.Name} Progress: {e.Percentage}" );
        Console.WriteLine( $"Progress bar {_progress}" );
    }

    private async Task SaveImage()
    {
        if(Course is null)
            return;
        
        var croped = await _cropper.GetCropedResult();
        var imageBytes = await croped.GetDataAsync();
        var imageBase64 = Convert.ToBase64String(imageBytes);

        var course = await ApiDispatcher.Dispatch(new UpdateCourseImageCommand
        {
            Id = Course.Id,
            Extension = _fileExtension,
            ImageBase64 = imageBase64
        });

        File = null;
        _fileExtension = null;
        
        OnSave?.Invoke(course);
    }

    private void ResetImage()
    {
        File = null;
        _stage = Stage.SelectFile;
    }

}

