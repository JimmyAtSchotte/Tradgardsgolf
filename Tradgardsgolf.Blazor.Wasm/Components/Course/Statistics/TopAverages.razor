@if (Display())
{
    <Table>
        <TableHeader>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>Spelare</TableHeaderCell>
            <TableHeaderCell>Snitt</TableHeaderCell>
        </TableHeader>
        @for (var i = 0; i < _topAverages.Count(); i++)
        {
            var index = i;
            <TableRow>
                <TableRowCell>
                    @if (index == 0)
                    {
                        <i class="material-icons">insights</i>
                    }
                    else
                    {
                        @(index + 1)
                    }
                </TableRowCell>
                <TableRowCell>@_topAverages[index].Player</TableRowCell>
                <TableRowCell>@Math.Round(_topAverages[index].Average, 1)</TableRowCell>
            </TableRow>
        }
        <tr>

        </tr>
    </Table>
}

@code {

    [CascadingParameter]
    public CascadingCourseStatistics CascadingCourseStatistics { get; set; }

    private TopAverageModel[] _topAverages;
    private int _listCount = 10;


    protected override void OnParametersSet()
    {
        if (CascadingCourseStatistics?.CourseStatisticModel == null)
            return;

        _topAverages = CascadingCourseStatistics.CourseStatisticModel.Rounds.Select(x => new
        {
            Rounds = x.Scores.GroupBy(score => score.Player)
                .Select(p => new
                {
                    Player = p.Key,
                    ToatalScore = p.Sum(s => s.Score)
                })
        }).SelectMany(x => x.Rounds)
            .GroupBy(x => x.Player)
            .Select(x => new TopAverageModel
            {
                Player = x.Key,
                Average = (double) x.Sum(score => score.ToatalScore) / (double) x.Count()
            })
            .OrderBy(x => x.Average)
            .Take(_listCount)
            .ToArray();
    }

    private class TopAverageModel
    {
        public string Player { get; set; }
        public double Average { get; set; }
    }

    private bool Display()
    {
        return CascadingCourseStatistics != null && _topAverages != null && !CascadingCourseStatistics.Loading;
    }

}