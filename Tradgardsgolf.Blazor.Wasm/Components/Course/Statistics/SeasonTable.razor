
@if (Display())
{
    <Table>
        @foreach (var obj in _seasonTableModels.Select((model, i) => new
        {
            Position = i +1,
            Model = model
        }))
        {
            <TableRow>
                <TableRowCell ColumnSpan="@(CascadingCourse.CourseResponse.SeasonTableRounds + 1)">
                    <strong>@obj.Position. @obj.Model.Player</strong>
                </TableRowCell>
            </TableRow>
            <TableRow>
                @for (var i = 0; i < CascadingCourse.CourseResponse.SeasonTableRounds; i++)
                {
                    var index = i;
                    <TableRowCell Style="border-top: none">@obj.Model.GetScore(index)</TableRowCell>
                }
                <TableRowCell Style="border-top: none"><strong>@obj.Model.Scores.Sum()</strong></TableRowCell>
            </TableRow>
        }
    </Table>
}

@code {
    [CascadingParameter]
    public CascadingCourseStatistics CascadingCourseStatistics { get; set; }
    
    [CascadingParameter]
    public CascadingCourse CascadingCourse { get; set; }

    [Parameter]
    public int? Year { get; set; }  
    
    private IEnumerable<SeasonTableModel> _seasonTableModels;

    protected override void OnParametersSet()
    {
        if(CascadingCourseStatistics?.CourseStatisticResponse == null)
            return;
        
        if(!Year.HasValue)
            return;
        
        RenderSeasonTable();
    }

    private void RenderSeasonTable()
    {
        _seasonTableModels = CascadingCourseStatistics.CourseStatisticResponse.Rounds
                .Where(x => x.Date.Year == Year.GetValueOrDefault(0))
                .Select(x => new
                {
                    Rounds = x.Scores.GroupBy(score => score.Player)
                        .Select(p => new
                        {
                            Player = p.Key,
                            ToatalScore = p.Sum(s => s.Score)
                        })
                })
                .SelectMany(x => x.Rounds)
                .GroupBy(x => x.Player)
                .Select(x => new SeasonTableModel
                {
                    Player = x.Key,
                    Scores = x.OrderBy(s => s.ToatalScore)
                        .Take(CascadingCourse.CourseResponse.SeasonTableRounds)
                        .Select(s => s.ToatalScore)
                        .ToArray()
                })
                .OrderByDescending(x => x.Scores.Count())
                .ThenBy(x => x.Scores.Sum());
    }

    private bool Display()
    {
        return CascadingCourseStatistics != null && _seasonTableModels != null && !CascadingCourseStatistics.Loading;
    }

    private class SeasonTableModel
    {
        public string Player { get; set; }
        public int[] Scores { get; set; }

        public string GetScore(int i)
        {
            if (Scores.Length <= i)
                return "-";

            return Scores[i].ToString();
        }
    }
}