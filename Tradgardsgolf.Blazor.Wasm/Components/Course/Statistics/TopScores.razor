@if (Display())
{
    <Table>
        <TableHeader>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>Spelare</TableHeaderCell>
            <TableHeaderCell>Resultat</TableHeaderCell>
            <TableHeaderCell>Datum</TableHeaderCell>
        </TableHeader>
        @for (var i = 0; i < _topScore.Length; i++)
        {
            var index = i;
            <TableRow>
                <TableRowCell>
                    @if (index == 0)
                    {
                        <i class="material-icons">emoji_events</i>
                    }
                    else
                    {
                        @(index + 1)
                    }
                </TableRowCell>
                <TableRowCell>@_topScore[index].Player</TableRowCell>
                <TableRowCell>@_topScore[index].ToatalScore</TableRowCell>
                <TableRowCell>@_topScore[index].Date.ToString("yyyy-MM-dd")</TableRowCell>
            </TableRow>
        }
    </Table>
}

@code {

    [CascadingParameter] public CascadingCourseStatistics CascadingCourseStatistics { get; set; }

    private TopScoreModel[] _topScore;
    private int _listCount = 10;

    protected override void OnParametersSet()
    {
        if (CascadingCourseStatistics?.CourseStatisticResponse == null)
            return;

        _topScore = CascadingCourseStatistics.CourseStatisticResponse.PlayerStatistics.OrderBy(x => x.BestScore.Score)
            .ThenBy(x => x.BestScore.Date)
            .Select(p => new TopScoreModel
            {
                Date = p.BestScore.Date,
                Player = p.Name,
                ToatalScore =  p.BestScore.Score
            })
            .Take(_listCount)
            .ToArray();
    }

    private class TopScoreModel
    {
        public string Player { get; set; }
        public DateTime Date { get; set; }
        public int ToatalScore { get; set; }
    }


    private bool Display()
    {
        return CascadingCourseStatistics != null && _topScore != null && !CascadingCourseStatistics.Loading;
    }

}