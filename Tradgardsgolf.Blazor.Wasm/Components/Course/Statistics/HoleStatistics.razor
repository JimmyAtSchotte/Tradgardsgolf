@if (Display())
{
    <Table>
        <TableHeader>
            <TableHeaderCell>Hål</TableHeaderCell>
            <TableHeaderCell>Snitt</TableHeaderCell>
            <TableHeaderCell>Hole in one</TableHeaderCell>
        </TableHeader>
        @foreach (var holeAverage in _holeAverageModels)
        {
            <TableRow>
                <TableRowCell>@holeAverage.Hole</TableRowCell>
                <TableRowCell>@Math.Round(holeAverage.Average, 1)</TableRowCell>
                <TableRowCell>@holeAverage.HoleInOnes</TableRowCell>
            </TableRow>
        }
    </Table>
}

@code {

    [CascadingParameter] public CascadingCourseStatistics? CascadingCourseStatistics { get; set; }

    private HoleStatisticModel[] _holeAverageModels = [];

    protected override void OnParametersSet()
    {
        if (CascadingCourseStatistics?.CourseStatisticResponse == null)
            return;

        _holeAverageModels = CascadingCourseStatistics.CourseStatisticResponse.PlayerStatistics
            .SelectMany(x => x.HoleStatistics.Select((h, index) => new
                {
                    Hole = index + 1,
                    Total = x.TimesPlayed * h.AverageScore,
                    x.TimesPlayed,
                    h.HoleInOnes
                }))
            .GroupBy(arg => arg.Hole)
            .Select(x => new HoleStatisticModel(
                hole: x.Key, 
                average: x.Sum(y => y.Total) / x.Sum(y => y.TimesPlayed), 
                holeInOnes: x.Sum(y => y.HoleInOnes)))
            .ToArray();
    }

    private bool Display()
    {
        return CascadingCourseStatistics != null && _holeAverageModels.Any() && !CascadingCourseStatistics.Loading;
    }

    private class HoleStatisticModel(int hole, double average, int holeInOnes)
    {
        public int Hole { get; } = hole;
        public double Average { get; } = average;
        public int HoleInOnes { get; } = holeInOnes;
    }

}